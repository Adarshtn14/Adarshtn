import tkinter as tk
from tkinter import ttk, messagebox

class ContactBookApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Contact Book")
        self.root.geometry("700x500")
        self.root.resizable(False, False)

        self.contacts = []

       
        self.input_frame = ttk.LabelFrame(self.root, text="Add / Update Contact")
        self.input_frame.pack(fill="x", padx=10, pady=5)

        self.list_frame = ttk.LabelFrame(self.root, text="Contact List")
        self.list_frame.pack(fill="both", expand=True, padx=10, pady=5)

        self.name_var = tk.StringVar()
        self.phone_var = tk.StringVar()
        self.email_var = tk.StringVar()
        self.address_var = tk.StringVar()

        self.create_input_fields()
        self.create_buttons()
        self.create_contact_list()

    def create_input_fields(self):
        ttk.Label(self.input_frame, text="Name:").grid(row=0, column=0, padx=5, pady=5)
        ttk.Entry(self.input_frame, textvariable=self.name_var, width=25).grid(row=0, column=1)

        ttk.Label(self.input_frame, text="Phone:").grid(row=0, column=2, padx=5, pady=5)
        ttk.Entry(self.input_frame, textvariable=self.phone_var, width=25).grid(row=0, column=3)

        ttk.Label(self.input_frame, text="Email:").grid(row=1, column=0, padx=5, pady=5)
        ttk.Entry(self.input_frame, textvariable=self.email_var, width=25).grid(row=1, column=1)

        ttk.Label(self.input_frame, text="Address:").grid(row=1, column=2, padx=5, pady=5)
        ttk.Entry(self.input_frame, textvariable=self.address_var, width=25).grid(row=1, column=3)

    def create_buttons(self):
        ttk.Button(self.input_frame, text="Add Contact", command=self.add_contact).grid(row=2, column=0, padx=5, pady=10)
        ttk.Button(self.input_frame, text="Update Contact", command=self.update_contact).grid(row=2, column=1, padx=5)
        ttk.Button(self.input_frame, text="Delete Contact", command=self.delete_contact).grid(row=2, column=2, padx=5)
        ttk.Button(self.input_frame, text="Clear Fields", command=self.clear_fields).grid(row=2, column=3, padx=5)

        ttk.Label(self.input_frame, text="Search:").grid(row=3, column=0, padx=5)
        self.search_var = tk.StringVar()
        ttk.Entry(self.input_frame, textvariable=self.search_var, width=25).grid(row=3, column=1, padx=5, pady=5)
        ttk.Button(self.input_frame, text="Search", command=self.search_contact).grid(row=3, column=2)

    def create_contact_list(self):
        self.tree = ttk.Treeview(self.list_frame, columns=("Name", "Phone", "Email", "Address"), show="headings")
        for col in ("Name", "Phone", "Email", "Address"):
            self.tree.heading(col, text=col)
            self.tree.column(col, width=150)
        self.tree.pack(fill="both", expand=True)
        self.tree.bind("<ButtonRelease-1>", self.on_tree_select)

    def add_contact(self):
        name = self.name_var.get().strip()
        phone = self.phone_var.get().strip()
        email = self.email_var.get().strip()
        address = self.address_var.get().strip()

        if not name or not phone:
            messagebox.showwarning("Missing Data", "Name and Phone are required.")
            return

        self.contacts.append({"name": name, "phone": phone, "email": email, "address": address})
        self.refresh_contact_list()
        self.clear_fields()

    def update_contact(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("Select Contact", "Select a contact to update.")
            return

        index = self.tree.index(selected)
        self.contacts[index] = {
            "name": self.name_var.get(),
            "phone": self.phone_var.get(),
            "email": self.email_var.get(),
            "address": self.address_var.get()
        }
        self.refresh_contact_list()
        self.clear_fields()

    def delete_contact(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("Select Contact", "Select a contact to delete.")
            return

        index = self.tree.index(selected)
        del self.contacts[index]
        self.refresh_contact_list()
        self.clear_fields()

    def clear_fields(self):
        self.name_var.set("")
        self.phone_var.set("")
        self.email_var.set("")
        self.address_var.set("")
        self.search_var.set("")
        self.tree.selection_remove(self.tree.selection())

    def refresh_contact_list(self):
        self.tree.delete(*self.tree.get_children())
        for contact in self.contacts:
            self.tree.insert("", "end", values=(contact["name"], contact["phone"], contact["email"], contact["address"]))

    def on_tree_select(self, event):
        selected = self.tree.selection()
        if not selected:
            return

        index = self.tree.index(selected)
        contact = self.contacts[index]
        self.name_var.set(contact["name"])
        self.phone_var.set(contact["phone"])
        self.email_var.set(contact["email"])
        self.address_var.set(contact["address"])

    def search_contact(self):
        keyword = self.search_var.get().lower()
        if not keyword:
            self.refresh_contact_list()
            return

        self.tree.delete(*self.tree.get_children())
        for contact in self.contacts:
            if keyword in contact["name"].lower() or keyword in contact["phone"]:
                self.tree.insert("", "end", values=(contact["name"], contact["phone"], contact["email"], contact["address"]))


if __name__ == "__main__":
    root = tk.Tk()
    app = ContactBookApp(root)
    root.mainloop()

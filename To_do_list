import tkinter as tk
from tkinter import messagebox, ttk
import json
import os

class TodoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List Application")
        self.root.geometry("500x500")
        self.root.resizable(False, False)
        
        
        self.tasks = []
        
       
        self.create_widgets()
        
       
        self.load_tasks()
    
    def create_widgets(self):
        
        self.entry_frame = tk.Frame(self.root)
        self.entry_frame.pack(pady=10)
        
       
        self.task_entry = tk.Entry(self.entry_frame, width=40, font=("Arial", 12))
        self.task_entry.pack(side=tk.LEFT, padx=5)
        self.task_entry.bind("<Return>", self.add_task)
        
        
        self.add_button = tk.Button(self.entry_frame, text="Add", command=self.add_task, 
                                   bg="#4CAF50", fg="white", font=("Arial", 10, "bold"))
        self.add_button.pack(side=tk.LEFT, padx=5)
        
        self.list_frame = tk.Frame(self.root)
        self.list_frame.pack(pady=10)
        
        
        self.scrollbar = tk.Scrollbar(self.list_frame)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        
        self.task_list = tk.Listbox(
            self.list_frame, 
            width=50, 
            height=15, 
            font=("Arial", 12), 
            yscrollcommand=self.scrollbar.set,
            selectbackground="#a6a6a6",
            selectmode=tk.SINGLE
        )
        self.task_list.pack(side=tk.LEFT, fill=tk.BOTH)
        self.scrollbar.config(command=self.task_list.yview)
        
        
        self.button_frame = tk.Frame(self.root)
        self.button_frame.pack(pady=10)
        
       
        self.update_button = tk.Button(
            self.button_frame, 
            text="Update", 
            command=self.update_task,
            bg="#2196F3", 
            fg="white", 
            font=("Arial", 10, "bold")
        )
        self.update_button.pack(side=tk.LEFT, padx=5)
        
        
        self.delete_button = tk.Button(
            self.button_frame, 
            text="Delete", 
            command=self.delete_task,
            bg="#f44336", 
            fg="white", 
            font=("Arial", 10, "bold")
        )
        self.delete_button.pack(side=tk.LEFT, padx=5)
        
        
        self.clear_button = tk.Button(
            self.button_frame, 
            text="Clear All", 
            command=self.clear_tasks,
            bg="#607D8B", 
            fg="white", 
            font=("Arial", 10, "bold")
        )
        self.clear_button.pack(side=tk.LEFT, padx=5)
        
        
        self.status_var = tk.StringVar()
        self.status_var.set(f"Tasks: {len(self.tasks)}")
        self.status_bar = tk.Label(
            self.root, 
            textvariable=self.status_var, 
            relief=tk.SUNKEN, 
            anchor=tk.W,
            font=("Arial", 10)
        )
        self.status_bar.pack(fill=tk.X, side=tk.BOTTOM, ipady=5)
    
    def add_task(self, event=None):
        task = self.task_entry.get().strip()
        if task:
            self.tasks.append({"task": task, "completed": False})
            self.task_list.insert(tk.END, task)
            self.task_entry.delete(0, tk.END)
            self.save_tasks()
            self.update_status()
        else:
            messagebox.showwarning("Warning", "Please enter a task.")
    
    def update_task(self):
        try:
            selected_index = self.task_list.curselection()[0]
            new_task = self.task_entry.get().strip()
            
            if new_task:
                self.tasks[selected_index]["task"] = new_task
                self.task_list.delete(selected_index)
                self.task_list.insert(selected_index, new_task)
                self.task_entry.delete(0, tk.END)
                self.save_tasks()
            else:
                messagebox.showwarning("Warning", "Please enter a task to update.")
        except IndexError:
            messagebox.showwarning("Warning", "Please select a task to update.")
    
    def delete_task(self):
        try:
            selected_index = self.task_list.curselection()[0]
            self.task_list.delete(selected_index)
            del self.tasks[selected_index]
            self.save_tasks()
            self.update_status()
        except IndexError:
            messagebox.showwarning("Warning", "Please select a task to delete.")
    
    def clear_tasks(self):
        if messagebox.askyesno("Confirm", "Are you sure you want to delete all tasks?"):
            self.task_list.delete(0, tk.END)
            self.tasks.clear()
            self.save_tasks()
            self.update_status()
    
    def update_status(self):
        self.status_var.set(f"Tasks: {len(self.tasks)}")
    
    def save_tasks(self):
        with open("tasks.json", "w") as f:
            json.dump(self.tasks, f)
    
    def load_tasks(self):
        if os.path.exists("tasks.json"):
            try:
                with open("tasks.json", "r") as f:
                    self.tasks = json.load(f)
                
                for task in self.tasks:
                    self.task_list.insert(tk.END, task["task"])
                
                self.update_status()
            except (json.JSONDecodeError, IOError):
                # File exists but is corrupted or empty
                self.tasks = []
    
    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    root = tk.Tk()
    app = TodoApp(root)
    app.run()
